/*
 * FlightControl.cpp
 *
 *  Created on: Mar 28, 2012
 *      Author: imaveek
 */

#include "FlightControl.h"
#include "TimerOne.h"
#include "TimerThree.h"
#include "MPU6050.h"
#include "HMC5883L.h"
#include "MaxBotix.h"
#include "LowPassFilter.h"
#include <stdlib.h>


#define GYRO_BIAS -92
#define GYRO_LPF_LEN 20
#define PWM_PERIOD 100
#define PID_PERIOD 2500UL

#define DUTY_MIN 0
#define DUTY_MAX 1024
#define ALT_PID_FREQ_DIV 20

#define THROTTLE_MAX 1024;

#define MAX_TAKEOFF_SPEED 10
#define MAX_LAND_SPEED 4
#define SPEED_DUTY_DELTA 20
#define LANDED_ALT 20
#define ALT_EPS 5
#define LANDED_FOR_SURE_CNT 10

#define TURN_DUTY_OFFSET 20

void * pointerToObj;
static void wrapper();

float turnStop = 0;
int8_t turnDir;

FlightControl FlightControl1;
LowPassFilter altFilter(20);


void FlightControl::initialize() {
	// Initialize values
	yawPIDenabled = false;
	altPIDenabled = false;
	gyroSetPoint = GYRO_BIAS;
	altSetPoint = 90;

	dt = 0.0025;//PID_PERIOD/1000000UL;

	throttle = 0;
	yawInput=0;
	topRotDuty=0;
	botRotDuty=0;
	gz=0;
	alt=0;

	gyrosum = 0;

	yawPID = new PID(0.2,0.025,0,400,dt,100,0);
	altPID = new PID(10,6,0,4,dt*ALT_PID_FREQ_DIV,1024,200);

	flightMode = Idle;

	// *************** Motor PWM *******************
	// set a timer of length 100 microseconds
	// Needed to set the mode 8 for phase and frequency correct PWM
	Timer1.initialize(PWM_PERIOD);
	Timer1.pwm(MOTOR1_PIN, 0, PWM_PERIOD); // PWM frequency 10000Hz
	Timer1.pwm(MOTOR2_PIN, 0, PWM_PERIOD);

	pinMode(MOTOR3_PIN, OUTPUT);

	// *************** PID Control *****************
	Timer3.initialize(PID_PERIOD); // Timer 3, 10000us, 100Hz
	pointerToObj = this;
	Timer3.attachInterrupt(wrapper, PID_PERIOD);

	// initialize device
	Serial1.println("Initializing Accel/Gyro ...");
	AccelGyro.initialize();
	AccelGyro.setI2CBypassEnabled(HIGH);
	AccelGyro.setDLPFMode(MPU6050_DLPF_BW_256);
	AccelGyro.setFullScaleGyroRange(MPU6050_GYRO_FS_1000);

	Compass.initialize();

	// verify connection
	Serial1.println("Testing Accel/Gyro connections...");
	Serial1.println(AccelGyro.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
	Serial1.println(Compass.testConnection() ? "HMC5883L connection successful" : "HMC5883L connection failed");

	alt = AltSensor.value();
}


// To call the main loop function in the timer interrupt
void wrapper() {
	FlightControl * mySelf =  (FlightControl *) pointerToObj;
	mySelf->mainLoop();
}

void FlightControl::mainLoop()
{
	sei();

	static uint8_t loopCounter=0;
	static int16_t lastAltValue=0;
	static uint8_t landedAltCount=0;

	// Get measurements
	gz = AccelGyro.getRotationZ();
	mz = Compass.getHeadingZ();

	loopCounter++;

	switch(flightMode) {
	case Idle: // Do nothing. Stationary landed.
		//		throttle = 0;
		topRotDuty = throttle;
		botRotDuty = throttle;
		break;
	case Hover: // Maintain altitude. Can go forward in this mode.
		// Slow Altitude Control loop
		if (altPIDenabled && (loopCounter % ALT_PID_FREQ_DIV)==0) {

			alt = AltSensor.value();
			alt = altFilter.filter(alt);

			altInput = altPID->loop(altSetPoint,alt);
			throttle = altInput;
			throttle = (throttle<DUTY_MIN) ? DUTY_MIN:throttle;
			throttle = (throttle>DUTY_MAX) ? DUTY_MAX:throttle;
		}
		topRotDuty = throttle;
		botRotDuty = throttle;
		break;
	case TakeOff: // Increase throttle till height is achieved
		if (lastAltValue==0) {
			throttle = THROTTLE_MAX;
		} else if (abs(alt-lastAltValue)<=MAX_TAKEOFF_SPEED) {
			flightMode = Hover;
		}
		lastAltValue = alt;
		topRotDuty = throttle;
		botRotDuty = throttle;
		break;
	case Land: // Decrease throttle to land smoothly
		if (abs(alt-LANDED_ALT)<=ALT_EPS) {
			landedAltCount++;
			if (landedAltCount > LANDED_FOR_SURE_CNT) {
				throttle = 0;
				flightMode = Idle;
			}
		} else {
			landedAltCount=0;
			if ((lastAltValue-alt)<MAX_LAND_SPEED) {
				throttle = throttle - SPEED_DUTY_DELTA;
			}
		}
		lastAltValue = alt;
		topRotDuty = throttle;
		botRotDuty = throttle;
		break;
	case Turn: // Execute open loop turn
		gyrosum += (gz-GYRO_BIAS) * dt * 1000/32768;
		if (abs(gyrosum)-abs(turnStop) > 0) {
			gyrosum = 0;
			flightMode = Hover;
			yawPIDenabled = true;
		} else {
			topRotDuty = throttle+(turnDir*TURN_DUTY_OFFSET);
			botRotDuty = throttle-(turnDir*TURN_DUTY_OFFSET);
		}
		break;
	}

	// Fast Yaw Control loop
	if (yawPIDenabled) {
		yawInput = yawPID->loop(gyroSetPoint,gz);
		topRotDuty = throttle - yawInput;
		botRotDuty = throttle + yawInput;

		// Set motor duty cycles
		setTopRotorDuty(topRotDuty);
		setBottomRotorDuty(botRotDuty);
	}
}


void FlightControl::turn(int16_t angle) {
	gyrosum = 0;
	turnStop = angle;
	turnDir = angle/abs(angle);
	yawPIDenabled = false;
	flightMode = Turn;
}


void FlightControl::takeOff() {
	flightMode = TakeOff;
}

void FlightControl::land() {
	flightMode = Land;
}

void FlightControl::forward(bool status) {
	if(status && flightMode==Hover)
		digitalWrite(MOTOR3_PIN,HIGH);
	else
		digitalWrite(MOTOR3_PIN,LOW);
}

void FlightControl::hover() {
	yawPIDenabled = true;
	altPIDenabled = false;
	throttle = 900;
	flightMode = Hover;
}

void FlightControl::idle() {
	flightMode = Idle;
}

void FlightControl::enableYawPID(bool status) {
	this->yawPIDenabled = status;
}

void FlightControl::enableAltPID(bool status) {
	this->altPIDenabled = status;
}

void FlightControl::setTopRotorDuty(uint16_t duty) {
	Timer1.setPwmDuty(MOTOR1_PIN,duty);
}

void FlightControl::setBottomRotorDuty(uint16_t duty) {
	Timer1.setPwmDuty(MOTOR2_PIN,duty);
}
