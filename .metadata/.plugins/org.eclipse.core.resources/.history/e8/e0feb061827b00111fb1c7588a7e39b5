#define ARDUINO_MAIN

#include "main.h"

#include "Wire.h"
#include "I2Cdev.h"
#include "ZigduinoRadio.h"
#include "RemoteCmd.h"


#define LED_PIN 23
#define CMD_MAX_LEN 20

bool blinkState = false;
RemoteCmd remoteCmd;

void errHandle(radio_error_t err);
void onXmitDone(radio_tx_done_t x);

void setup() {
	// join I2C bus (I2Cdev library doesn't do this automatically)
	Wire.begin();

	// initialize serial communication
	// (38400 chosen because it works as well at 8MHz as it does at 16MHz, but
	// it's really up to you depending on your project)
	Serial1.begin(9600);

	// configure Arduino LED for
	pinMode(LED_PIN, OUTPUT);

	// ZigduinoRadio
	ZigduinoRadio.begin(11);
	ZigduinoRadio.attachError(errHandle);
	ZigduinoRadio.attachTxDone(onXmitDone);
}

void loop()
{
	int16_t gz;
	uint8_t buf[sizeof(RemoteCmd)];
	char cmdbuf[CMD_MAX_LEN];
	char mode = 0;

	if(Serial1.available()) {
		char c = Serial1.read();
		if(c == 27)
			mode = 0;
	}

	switch(mode) {
	case 'r': // Print received readings on screen
		if (ZigduinoRadio.available())
		{
			Serial1.println();
			Serial1.print("Rx: ");
			while(ZigduinoRadio.available() >= 2) {
				gz = ZigduinoRadio.read();
				gz = gz | (ZigduinoRadio.read() << 8);
				Serial1.println(gz);
			}
		}
		break;
	case 'c': // Send commands
		Serial.println("Enter command:");
		Serial.print(">>");
		uint8_t cmdlen = 0;


		while(Serial1.peek()!='\n' && cmdlen<CMD_MAX_LEN-1) {
			if (Serial1.available())
				cmdbuf[cmdlen++] = Serial1.read();
		}
		cmdbuf[cmdlen] = '\0';
		Serial1.readBytesUntil('\n',cmdbuf,CMD_MAX_LEN);

		// Parse string
		int val = sscanf(cmdbuf,"%c=%f",remoteCmd.cmd,remoteCmd.value);
		if (val == 2) {
			Serial1.println("OK");
			// Send command
			ZigduinoRadio.beginTransmission();
			ZigduinoRadio.write(buf,sizeof(RemoteCmd));
			ZigduinoRadio.endTransmission();
		} else {
			Serial.println("Error. Try Again.");
		}
		break;
	default:
		Serial.println("Select Mode:");
		Serial.println("r - Show Sensor Readings");
		Serial.println("c - Send command");
		Serial.println(">>");
		break;
	}
	delay(100);
}

void errHandle(radio_error_t err)
{
	Serial1.println();
	Serial1.print("Error: ");
	Serial1.print((uint8_t)err, 10);
	Serial1.println();
}

void onXmitDone(radio_tx_done_t x)
{
	Serial1.println();
	Serial1.print("TxDone: ");
	Serial1.print((uint8_t)x, 10);
	Serial1.println();
}

int main(void)
{
	init();
	setup();
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
	}
	return 0;
}

